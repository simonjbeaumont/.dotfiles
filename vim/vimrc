" .vimrc : Si Beaumont
" vim: foldmethod=marker

" General {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype indent on

" Setup for merlin
if executable("opam")
    let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
    execute "set rtp+=" . g:opamshare . "/merlin/vim"
    execute "set rtp+=" . g:opamshare . "/ocp-indent/vim"
endif

scriptencoding utf-8
set encoding=utf-8

" Set to auto read when a file is changed from the outside
set autoread

" Search for tags file in pwd then search backwards until /
set tags=tags;/

" Change the mapleader from \ to ,
let mapleader=","
let maplocalleader=","

" Use extended unicode mouse escape sequences (wide terminal support)
if has('mouse_sgr')
    set ttym=sgr
endif

" Get rid of nasty lag on ESC (timeout and ttimeout seem useless)
au InsertEnter * set timeoutlen=1
au InsertLeave * set timeoutlen=1000

" Load bashrc for shell commands
set shellcmdflag=-ic

" Use system clipboard on OSX
if has('mac')
    set clipboard=unnamed
endif
" }}}

" UI {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on

set guifont=Monospace\ 9

set mouse=a         " use the mouse in terminal mode

set go-=T           " no toolbar in gvim
set scrolloff=4     " lines of context when scrolling

set wildmode=longest,list     " bash-style file completion
set wildignore=*.o,*~,*.pyc   " Ignore compiled files
set wildignore+=*.cmi,*.cmt,*.cmx,*.cmti,*.cmxa,*.annot,*.native,*.opt

set ruler           " show current position
set colorcolumn=80  " always show width marker
set number          " always show line numbers
set cursorline      " highlight the current line

set showcmd         " display commands as entered
set cmdheight=2     " Height of the command bar
set laststatus=2    " Required for vim-powerline

set hidden          " allow hidden buffers

set showmatch       " show matching parenthesis
set matchtime=2     " show for 2 tenths of a second

set ignorecase      " ignore case when searching...
set smartcase       " ...unless I use case to search
set hlsearch        " highlight search terms
set incsearch       " show search matches as you type

set splitbelow      " open new splits below
set splitright      " open new vsplits to the right

set lazyredraw      " don't redraw during macros

set list                    " show invisibles
set listchars=tab:┼─,eol:¬  " another nice option is tab:▸\ 
set showbreak=↪\            " useful indication of wrapping

set foldmethod=marker   " fold on markers
set foldlevel=100       " ...but not by default

" use sensible regex
nnoremap / /\v
vnoremap / /\v

" sensible moving on wrapped lines
noremap j gj
noremap k gk
noremap 0 g0
noremap $ g$

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=

" change cursor in insert-mode within tmux
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

" Files, backups and undo {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if version >= 703
    set undodir=~/.vim/tmp/undo// " undo files
endif
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups
set swapfile                      " noswapfile has bitten me!
" }}}

" Text editing {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wrap
set textwidth=79
set formatoptions=qrn1j

set expandtab     " use tabs instead of spaces
set smarttab      " insert tabs at start of line with shiftwidth, not tabstop
set tabstop=2     " a tab is two spaces
set shiftwidth=2  " number of spaces to use for autoindenting

set backspace=indent,eol,start  " backpace over everything in insert mode

set autoindent    " always set autoindenting on
set smartindent   " for some auto-semantic-indenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
" }}}

" Spelling {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set spelllang=en
set spellfile=~/.vim/spellfile.add
" }}}

" Autocommands {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead *.xtx                                setl ft=tex
au FileType gitcommit                           setl spell tw=72 cc=72
au FileType mail                                setl spell tw=100 cc=100 fo=ajqrw1
au FileType ocaml                               setl fo-=t
au FileType cpp                                 setl sw=4 ts=4 tw=100 cc=100
au FileType cmake                               setl sw=4 ts=4 tw=100 cc=100
" }}}

" Key mappings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" (Slightly) quicker saving of files
nmap <leader>w :w!<CR>

" Sudo write (if we forgot to sudo vim)---super handy!
cnoreabbrev w!! w !sudo tee % >/dev/null

" Change to directory of file in current buffer
map <leader>cd :cd %:p:h<CR>:pwd<CR>

" Clear the highlight from the last search
nnoremap <silent> <leader>/ :nohlsearch<CR>

" Spelling shortcuts
map <leader>ss :setlocal spell!<CR>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" Disable width-marker when needed
map <leader>m :set colorcolumn=<CR>

" Focus on current fold, close the rest
nnoremap <leader>z zMzvzz

" System clipboard interaction
noremap <leader>y "+y
noremap <leader>p :set paste<CR>"+p<CR>:set nopaste<CR>
noremap <leader>P :set paste<CR>"+P<CR>:set nopaste<CR>
vnoremap <leader>y "+ygv

" Clean trailing whitespace from whole file
nnoremap <leader>W mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" Rerun ctags over directory
nmap <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" Quickly edit my todo file
nmap <silent> <leader>et :e /work/todo.txt<CR>:set ft=pandoc<CR>
nmap <silent> <leader>mi ^wy$/Worklog\n\=\=\=\=\=\=\=<CR>:nohlsearch<CR>j:read !date --rfc-3339='date'<CR>A: <ESC>p^
" nmap <silent> <leader>md ,mi<C-o>dd
nmap <silent> <leader>md ^r✔

" Moving around splits with the leader key
nmap <silent> <leader>h :wincmd h<CR>
nmap <silent> <leader>j :wincmd j<CR>
nmap <silent> <leader>k :wincmd k<CR>
nmap <silent> <leader>l :wincmd l<CR>
" }}}

" Open prompt with current directory
nmap <leader>e :e %:h/

" Plugin configuration {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off
runtime macros/matchit.vim
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'simonjbeaumont/mustang-vim'
if &t_Co >= 16 || has("gui_running")
    set bg=dark
    highlight ExtraWhitespace ctermbg=DarkRed ctermfg=Red
endif
silent! colorscheme mustang

Bundle 'sjl/badwolf'

Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-markdown'
Bundle 'jtratner/vim-flavored-markdown'
Bundle 'ciaranm/detectindent'
Bundle 'rgrinberg/vim-ocaml'
Bundle 'ekalinin/Dockerfile.vim'

Bundle 'mileszs/ack.vim'
nmap <leader>a :Ack!

Bundle 'bling/vim-airline'
let g:airline_theme             = 'powerlineish'
let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  let a:palette.normal.airline_a[2] = 234
  let a:palette.normal.airline_b[3] = 237
  let a:palette.normal.airline_c[2] = 248
  let a:palette.normal.airline_c[3] = 235
  let a:palette.normal.airline_x = a:palette.normal.airline_c
  let a:palette.normal.airline_y = a:palette.normal.airline_b
  let a:palette.normal.airline_z = a:palette.normal.airline_a
endfunction
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 0
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_inactive_collapse = '0'
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V', 'V'  : 'V', '' : 'V',
    \ 's'  : 'S', 'S'  : 'S', '' : 'S'}
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

Bundle 'vim-airline/vim-airline-themes'

Bundle 'scrooloose/nerdtree'
let NERDTreeWinSize = 40
let NERDTreeIgnore = [
    \ '\.pyc$',
    \ '\.class$',
    \ '\.cm\(x\(a\)\?\|i\|t\)$',
    \ '\.sp\(o\|i\)t$',
    \ '\.o\(\(pt\|mc\)\)\=$',
    \ '\.annot$']
nmap <silent> <leader>O :NERDTreeFind<CR>
nmap <silent> <leader>o :NERDTreeToggle<CR>

" Bundle 'scrooloose/syntastic'
" let g:syntastic_python_checkers = ['pylint', 'pep8']
" let g:syntastic_python_pylint_post_args = '-d C0103 -d C0111 --ignored-classes=twisted.internet.reactor'

Bundle 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1
let g:NERDRemoveExtraSpaces=1

Bundle 'klen/python-mode'
let g:pymode_run=0
let g:pymode_breakpoint=0
let g:pymode_trim_whitespaces=0
let g:pymode_lint_hold=0
let g:pymode_rope = 0

Bundle 'YankRing.vim'
let g:yankring_history_file='.yankring-hist'

Bundle 'Valloric/YouCompleteMe'
let g:ycm_confirm_extra_conf    = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm.py'
let g:ycm_extra_conf_vim_data   = ['&filetype']
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_filetype_blacklist = {
  \ 'tagbar': 1,
  \ 'python': 1,
\}
nnoremap <leader>g :YcmCompleter GoTo<CR>

Bundle 'ludovicchabant/vim-gutentags'

filetype plugin on
" }}}
